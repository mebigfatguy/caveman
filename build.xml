<!--
/*
 * caveman - A primitive collection library
 * Copyright 2011 MeBigFatGuy.com
 * Copyright 2011 Dave Brosius
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations
 * under the License.
 */
 -->

<project name="caveman" default="info" basedir=".">
    <property file="build.properties" />
    <property file="version.properties" />

	<property name="src.dir" value="${basedir}/src" />
	<property name="task.dir" value="${basedir}/task" />
	<property name="prototype.dir" value="${basedir}/prototype" />
	<property name="test.dir" value="${basedir}/test" />
	<property name="reports.dir" value="${basedir}/reports" />
	<property name="classes.dir" value="${basedir}/classes" />
	<property name="task.classes.dir" value="${basedir}/task.classes" />
	<property name="test.classes.dir" value="${basedir}/test.classes" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="javadoc.dir" value="${basedir}/javadoc" />
	<property name="javac.source" value="1.5" />
	<property name="javac.target" value="1.5" />
	<property name="javac.deprecation" value="on" />
	<property name="javac.debug" value="on" />

	<property name="caveman.version" value="0.7.0" />

	<path id="caveman.classpath">
		<pathelement location="${lib.dir}/ant-${ant_.version}.jar" />
        <pathelement location="${lib.dir}/junit-${junit.version}.jar" />
        <pathelement location="${lib.dir}/hamcrest-core-${hamcrest-core.version}.jar" />
		<pathelement location="${classes.dir}" />
		<pathelement location="${task.classes.dir}" />
		<pathelement location="${test.classes.dir}" />
	</path>
	
    <target name="info">
        <echo message="CaveMan - a collection library for primitives"/>
        <echo message=""/>
        <echo message="    this project uses yank (https://github.com/mebigfatguy/yank) for dependency management"/>
        <echo message="    download yank.jar and place in ant/lib directory"/>
        <echo message="    http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.mebigfatguy.yank%22"/>
    </target>
	
   <target name="yank" xmlns:yank="antlib:com.mebigfatguy.yank">
        <mkdir dir="${lib.dir}"/>
        <yank:yank yankFile="${basedir}/yank.xls" destination="${lib.dir}" source="true">
            <server url="http://repo1.maven.org/maven2"/>
            <generateVersions propertyFileName="${basedir}/version.properties" />
        </yank:yank>
    </target>

	<target name="clean" description="removes all generated collateral">
		<delete dir="${src.dir}" />
		<delete dir="${test.dir}" />
		<delete dir="${classes.dir}" />
		<delete dir="${task.classes.dir}" />
		<delete dir="${test.classes.dir}" />
		<delete dir="${reports.dir}" />
		<delete dir="${javadoc.dir}" />
		<delete file="${basedir}/caveman-${caveman.version}.jar" />
		<delete file="${basedir}/caveman-${caveman.version}-sources.zip" />
	</target>

	<target name="-init" depends="yank" description="prepares repository for a build">
		<mkdir dir="${src.dir}" />
		<mkdir dir="${test.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${task.classes.dir}" />
		<mkdir dir="${test.classes.dir}" />
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${javadoc.dir}" />
		<mkdir dir="${lib.dir}" />
	</target>

	<target name="produce" description="generates the primitive classes from the prototype">
		<taskdef name="caveman" classname="com.mebigfatguy.cavemantask.CaveManTask" classpathref="caveman.classpath" />
		<caveman sourceFolder="${prototype.dir}/com/mebigfatguy/caveman/proto" destinationFolder="${src.dir}/com/mebigfatguy/caveman" package="com.mebigfatguy.caveman" />
		<caveman sourceFolder="${prototype.dir}/com/mebigfatguy/caveman/proto/impl" destinationFolder="${src.dir}/com/mebigfatguy/caveman/impl" package="com.mebigfatguy.caveman.impl" />
		<caveman sourceFolder="${prototype.dir}/com/mebigfatguy/caveman/proto/test" destinationFolder="${test.dir}/com/mebigfatguy/caveman/test" package="com.mebigfatguy.caveman.test" />
	</target>

	<target name="compile_src" depends="produce" description="compiles java files">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" source="${javac.source}" target="${javac.target}" deprecation="${javac.deprecation}" debug="${javac.debug}" includeantruntime="false">
			<classpath refid="caveman.classpath" />
		</javac>
	</target>

	<target name="compile_task" depends="-init">
		<javac srcdir="${task.dir}" destdir="${task.classes.dir}" source="${javac.source}" target="${javac.target}" deprecation="${javac.deprecation}" debug="${javac.debug}" includeantruntime="true">
			<classpath refid="caveman.classpath" />
		</javac>
	</target>

	<target name="compile_test" depends="compile_src" description="builds the test classes">
		<javac srcdir="${test.dir}" destdir="${test.classes.dir}" source="${javac.source}" target="${javac.target}" deprecation="${javac.deprecation}" debug="${javac.debug}" includeantruntime="false">
			<classpath refid="caveman.classpath" />
		</javac>
	</target>

	<target name="test" depends="compile_test" description="run the unit tests">
		<junit printsummary="yes" haltonfailure="yes" haltonerror="true" showoutput="true">
			<classpath>
				<pathelement location="${test.classes.dir}" />
				<pathelement path="${classes.dir}" />
                <pathelement path="${lib.dir}/junit-${junit.version}.jar" />
                <pathelement path="${lib.dir}/hamcrest-core-${hamcrest-core.version}.jar" />
			</classpath>
			<batchtest fork="false" todir="${reports.dir}">
				<fileset dir="${test.classes.dir}" />
			</batchtest>
		</junit>
	</target>

	<target name="build" depends="clean, -init, compile_task, produce, compile_src, compile_test, test" description="compiles the code" />

	<target name="jar" depends="build" description="produces the caveman jar file">
		<jar destfile="${basedir}/caveman-${caveman.version}.jar">
			<fileset dir="${classes.dir}">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="${basedir}">
				<include name="LICENSE" />
			</fileset>
			<manifest>
				<attribute name="caveman-version" value="${caveman.version}" />
				<attribute name="Bundle-ManifestVersion" value="2" />
				<attribute name="Bundle-Name" value="caveman plugin" />
				<attribute name="Bundle-SymbolicName" value="caveman; singleton:=true" />
				<attribute name="Bundle-Version" value="${caveman.version}" />
				<attribute name="Bundle-ClassPath" value="." />
				<attribute name="Bundle-Vendor" value="MeBigFatGuy.com" />
				<attribute name="Bundle-ActivationPolicy" value="lazy" />
				<attribute name="Export-Package" value="com.mebigfatguy.caveman;version=&quot;${caveman.version}&quot;,com.mebigfatguy.caveman.impl;version=&quot;${caveman.version}&quot;" />
			</manifest>
		</jar>
	</target>

	<target name="srczip" description="builds the source distribution zip file">
		<zip destfile="${basedir}/caveman-${caveman.version}-sources.jar" basedir="${basedir}">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${task.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${prototype.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${test.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${basedir}">
				<include name="build.xml" />
				<include name="README" />
				<include name="LICENSE" />
			</fileset>
		</zip>
	</target>

	<target name="javadoc" depends="-init" description="build the javadoc for the project">
		<javadoc packagenames="com.mebigfatguy.*" sourcepath="${src.dir}" classpathref="caveman.classpath" destdir="${javadoc.dir}" windowtitle="caveman api">
			<doctitle>
				<![CDATA[<h1>caveman javadoc</h1>]]></doctitle>
		    <bottom>
			    <![CDATA[<i>Copyright &#169; 2011-2011 MeBigFatGuy.com. All Rights Reserved.</i>]]>
		    </bottom>
		</javadoc>
    </target>

    <target name="release" depends="build, srczip, javadoc" description="prepares everything for a release" />
	
    <target name="sonatype" depends="release" description="prepare an artifact bundle for sonatype">
        <mkdir dir="${sonatype.dir}"/>
        <copy todir="${sonatype.dir}" file="${basedir}/caveman-${caveman.version}.jar"/>
        <copy tofile="${sonatype.dir}/caveman-${caveman.version}-sources.jar" file="${basedir}/caveman-${caveman.version}-sources.jar"/>
        <jar destfile="${sonatype.dir}/caveman-${caveman.version}-javadoc.jar" basedir="${basedir}" includes="javadoc/**"/>
        <copy tofile="${sonatype.dir}/caveman-${caveman.version}.pom" file="${basedir}/pom.xml"/>
        
        <exec executable="gpg">
            <arg value="-abi" />
            <arg value="${sonatype.dir}/caveman-${caveman.version}.jar" />
        </exec>
        <exec executable="gpg">
            <arg value="-abi" />
            <arg value="${sonatype.dir}/caveman-${caveman.version}.pom" />
        </exec>
        <exec executable="gpg">
            <arg value="-abi" />
            <arg value="${sonatype.dir}/caveman-${caveman.version}-sources.jar" />
        </exec>        
        <exec executable="gpg">
            <arg value="-abi" />
            <arg value="${sonatype.dir}/caveman-${caveman.version}-javadoc.jar" />
        </exec>
        <jar destfile="${sonatype.dir}/bundle.jar" basedir="${sonatype.dir}" includes="caveman*">
        </jar>
        <echo message="" />
        <echo message="" />
        <echo message="====================================================================================================================================" />
        <echo message="sonatype update bundle produced at ${sonatype.dir}/bundle.jar" />
        <echo message="upload this jar at https://oss.sonatype.org" />
        <echo message="" />
        <echo message="see link for details-> https://docs.sonatype.org/display/Repository/Uploading+3rd-party+Artifacts+to+The+Central+Repository" />
        <echo message="====================================================================================================================================" />
    </target>
</project>
